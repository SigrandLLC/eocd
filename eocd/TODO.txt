1. EOC_dev и производные классы
    1 Чтение статистики
    2 Применение конфигурации (!!!! только для мастера !!!!!!)

2. Как определить что регенератор в канале отказал

3. Хранение Статистики (EOC_bd).
    1. Спроектировать структуру БД.
    2. продумать переходные процессы: падение связи, восстановление.
       В каких случаях удалять информацию из БД, а когда сохранять.
    3. Интерфейсы изменения БД
    4. Итерфейсы чтения информации из БД

4. SNMP_bd SNMP-специфичная информация и ее хранение - хранение отдельно от EOC_engine?
    Возможно сделать отдельным модулем.!!!!
    1. Конфигурационные профили
    2. Настройки пользователей типа предполагаемое количество регенераторов
    ..................
    
5. Интерфейс с внешними приложениями (UNIX-sockets) message-based
    1 Разработка базового ПО для создания канала
    2 Разработка протокола обмена информацией (запрос-ответ)
    2 Разработка базового ПО обработки входящий сообщений-запросов 
	и генерации сообщений ответов.
     
6. Каналы конфигурационной информации (получение/изменение информации в SNMP_bd b EOC_bd)
    1. Конфигурационный файл.
	1.1 Библиотека libconfig
	1.2 Разработка структуры конф. файла и выделение конф. опций
    2. Unix-сокеты
	1. проектир. структуру необходимых сообщений и их обработчики.

    
7. Конфигурирование каналов.
    1. Разработка универсального класса, предост. универсальный 
        интерфейс получения настроек
    2. Предусмотреть источники конф. информации:
	1) Кофигурационный файл
	2) UNIX-сокеты
	3) Вручную - пользователь сам настраивает интерфейсы, 
	   а демон только осуществляет мониторинг
    3 Переходные состояния - изменение настроек.
    4 Контроль актуальности настроек.


8. Инициализация приложения:
    1 поиск SHDSL интерфейсов
    2 настройка классов-устройств, и создание EOC_engine - элементов для каждого канала
    3 чтение конфигурации и ее применение к каналам.


9. Демонизация